// Generated by github.com/steida/coffee2closure 0.1.3
goog.require('goog.dom.classlist');
goog.require('goog.array');
goog.require('goog.ui.Component');
goog.provide('an.ui.Component');

/**
  @param {goog.dom.DomHelper=} domHelper
  @param {string=} localClassName
  @constructor
  @extends {goog.ui.Component}
 */
an.ui.Component = function(domHelper, localClassName) {
  if (domHelper == null) {
    domHelper = null;
  }
  an.ui.Component.superClass_.constructor.call(this, domHelper);
  this.extraClassNames = localClassName != null ? [localClassName] : [];
}
goog.inherits(an.ui.Component, goog.ui.Component);

/**
  @type {string}
  @protected
 */
an.ui.Component.prototype.DISABLED_CLS = 'an-component-disabled';

/**
  @type {boolean}
  @protected
 */
an.ui.Component.prototype.enabled = true;

/**
  @type {Array.<string>|null}
  @protected
 */
an.ui.Component.prototype.extraClassNames = null;

/**
  @type {?string}
  @private
 */
an.ui.Component.prototype._urlKey = null;

/**
  @type {boolean}
  @private
 */
an.ui.Component.prototype.loadOnEnterDocument = true;

/**
  @param {string=} _urlKey
 */
an.ui.Component.prototype.setUrlKey = function(_urlKey) {
  this._urlKey = _urlKey != null ? _urlKey : null;
};

/**
  @return {?string}
 */
an.ui.Component.prototype.getUrlKey = function() {
  return this._urlKey;
};

/**
  @override
 */
an.ui.Component.prototype.createDom = function() {
  an.ui.Component.superClass_.createDom.apply(this, arguments);
  return this.addExtraClassesToElement();
};

/**
  @param {boolean} loadOnEnterDocument
 */
an.ui.Component.prototype.enableLoadOnEnterDocument = function(loadOnEnterDocument) {
  this.loadOnEnterDocument = loadOnEnterDocument;
};
an.ui.Component.prototype.loadModelIfNeeded = function() {
  var _ref;
  if (this.loadOnEnterDocument) {
    return typeof this.getModel === "function" ? (_ref = this.getModel()) != null ? typeof _ref.loadData === "function" ? _ref.loadData() : void 0 : void 0 : void 0;
  }
};

/**
  @param {*} model
  @param {Object=} eventConfig
  @param {boolean=} clearEvents
  @override
 */
an.ui.Component.prototype.setModel = function(model, eventConfig, clearEvents) {
  var eventHandler, eventName, m;
  if (eventConfig == null) {
    eventConfig = null;
  }
  if (clearEvents == null) {
    clearEvents = false;
  }
  an.ui.Component.superClass_.setModel.call(this, model);
  m = /** @type {goog.events.Listenable} */(model);
  if (eventConfig != null) {
    if (clearEvents) {
      this.getHandler().removeAll();
    }
    for (eventName in eventConfig) {
      eventHandler = eventConfig[eventName];
      this.getHandler().listen(m, eventName, eventHandler);
    }
  }
};

/**
  @return {boolean}
 */
an.ui.Component.prototype.isEnabled = function() {
  return this.enabled;
};

/**
  @param {boolean} enabled
 */
an.ui.Component.prototype.setEnabled = function(enabled) {
  this.enabled = enabled;
  this.enableClassName(this.DISABLED_CLS, !enabled);
};

/**
  @param {string|Array.<string>} classNames
  @param {boolean} enabled
 */
an.ui.Component.prototype.enableClassName = function(classNames, enabled) {
  var className, _i, _len;
  if (typeof classNames === 'string') {
    classNames = [classNames];
  }
  for (_i = 0, _len = classNames.length; _i < _len; _i++) {
    className = classNames[_i];
    if (enabled) {
      if (!goog.array.contains(this.extraClassNames, className)) {
        this.extraClassNames.push(className);
      }
    } else {
      goog.array.remove(this.extraClassNames, className);
    }
    if (this.getElement()) {
      goog.dom.classlist.enable(this.getElement(), className, enabled);
    }
  }
};

/**
  @param {string|Array.<string>} classNames
 */
an.ui.Component.prototype.addClassName = function(classNames) {
  this.enableClassName(classNames, true);
};

/**
  @param {string|Array.<string>} classNames
 */
an.ui.Component.prototype.removeClassName = function(classNames) {
  this.enableClassName(classNames, false);
};

/**
  this should be called in createDom, if your component dont extend this createDom function, you have call it manually
  @param {Element=} element
 */
an.ui.Component.prototype.addExtraClassesToElement = function(element) {
  var className, _i, _len, _ref;
  if (element == null) {
    element = this.getElement();
  }
  if (element && (this.extraClassNames != null) && !goog.array.isEmpty(this.extraClassNames)) {
    _ref = this.extraClassNames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      className = _ref[_i];
      goog.dom.classlist.enable(element, className, true);
    }
  }
};

/**
  Feel free to override it on child component.
  @param {string} state
  @protected
 */
an.ui.Component.prototype.handleUrlStateInternal = function(state) {};

/**
  Feel free to override it on child component.
  @return {?string}
  @protected
 */
an.ui.Component.prototype.getUrlStateInternal = function() {
  return null;
};