// Generated by github.com/steida/coffee2closure 0.1.3
goog.require('an.ui.Component');
goog.require('goog.dom.classlist');
goog.provide('an.ui.Button');

/**
  @param {string} content
  @param {goog.ui.ButtonRenderer=} opt_renderer
  @param {goog.dom.DomHelper=} opt_domHelper
  @constructor
  @extends {an.ui.Component}
  @export
 */
an.ui.Button = function(content, opt_renderer, opt_domHelper) {
  this.content = content;
  this.setIcon = goog.bind(this.setIcon, this);
  an.ui.Button.superClass_.constructor.call(this, opt_domHelper);
  this._iconEl = goog.dom.createDom('i');
  this.updated = false;
  this.contentIsHtml = true;
}
goog.inherits(an.ui.Button, an.ui.Component);

/**
  @inheritDoc
  @export
 */
an.ui.Button.prototype.createDom = function() {
  an.ui.Button.superClass_.createDom.apply(this, arguments);
  return this.decorateInternal(this.getElement());
};

/**
  @inheritDoc
 */
an.ui.Button.prototype.decorateInternal = function(element) {
  an.ui.Button.superClass_.decorateInternal.call(this, element);
  goog.dom.classlist.enable(element, 'an-btn', true);
  this.setEnabled(this.enabled);
  this.setContent(this.content);
  goog.dom.appendChild(this.getContentElement(), this._iconEl);
};

/**
  @param {string} content
  @param {boolean|null=} contentIsHtml
  @export
 */
an.ui.Button.prototype.setContent = function(content, contentIsHtml) {
  var el;
  this.content = content;
  if (contentIsHtml == null) {
    contentIsHtml = null;
  }
  if (contentIsHtml != null) {
    this.contentIsHtml = contentIsHtml;
  }
  if (el = this.getElement()) {
    if (this.contentIsHtml) {
      return el.innerHTML = this.content;
    } else {
      return this.dom_.setTextContent(el, this.content);
    }
  }
};

/**
  @return {string}
  @export
 */
an.ui.Button.prototype.getHTMLContent = function() {
  return this.getElement().innerHTML;
};

/**
  @return {string}
  @export
 */
an.ui.Button.prototype.getTextContent = function() {
  return this.getElement().innerText;
};

/**
  @param {boolean} updated
  @export
 */
an.ui.Button.prototype.setUpdated = function(updated) {
  this.updated = updated;
};

/**
  @return {boolean}
  @export
 */
an.ui.Button.prototype.isUpdated = function() {
  return this.updated;
};

/**
  @override
  @export
 */
an.ui.Button.prototype.enterDocument = function() {
  an.ui.Button.superClass_.enterDocument.apply(this, arguments);
  this.getHandler().listen(this.getElement(), goog.events.EventType.CLICK, this.handleClick);
};

/**
  @param {goog.events.Event} ev
  @export
 */
an.ui.Button.prototype.handleClick = function(ev) {
  if (!this.isEnabled()) {
    return;
  }
  this.dispatchEvent(goog.ui.Component.EventType.ACTION);
};

/**
  @param {string} icon
  @export
 */
an.ui.Button.prototype.setIcon = function(icon) {
  goog.dom.classlist.add(this._iconEl, icon);
  goog.dom.classlist.add(this._iconEl, 'icon');
};